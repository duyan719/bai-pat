module.exports.config = {
	name: "join",
	eventType: ["log:subscribe"],
	version: "1.0.1",
	credits: "Mirai Team",
	description: "Th√¥ng b√°o bot ho·∫∑c ng∆∞·ªùi v√†o nh√≥m",
	dependencies: {
		"fs-extra": ""
	}
};

module.exports.run = async function({ api, event }) {
	const { join } = global.nodemodule["path"];
	const { threadID } = event;
	if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
		api.changeNickname(`[ ${global.config.PREFIX} ] ‚Ä¢ ${(!global.config.BOTNAME) ? "Made by CatalizCS and SpermLord" : global.config.BOTNAME}`, threadID, api.getCurrentUserID());
		return api.sendMessage(`¬ª ùôÜùôÄùôè ùôâùôäùôÑ ùôèùôÉùòºùôâùôÉ ùòæùôäùôâùôÇ¬´

‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ
‚ö†ùôçùôêùôáùôÄ
1. C·∫•m spam nhi·ªÅu l·ªánh 10 l·ªánh tr√™n 2 ph√∫t s·∫Ω b·ªã auto ban
2. C·∫•m 2 bot 1 box (=ban uid + thread)
3. H·∫°n ch·∫ø menu v√† help (n√™n copy l·∫°i)
4. Th√™m bot ko xin (=ban)
5. ƒê·ª´ng c√≥ m√† ch·ª≠i bot ƒÉn ban ƒë·∫•y :)))
6. G√µ "lu·∫≠t bot" ƒë·ªÉ xem c√°c lu·∫≠t c·ªßa bot.
‚óÜ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óÜ
üë§Nh·∫≠p /ad s·∫Ω c√≥ th√¥ng tin c·ªßa adminbot
üìåLi√™n h·ªá khi c·∫ßn thi·∫øt
‚öúQTV c√≥ th·ªÉ d√πng '/help rule' ƒë·ªÉ xem h∆∞·ªõng d·∫´n v√† set b·∫£ng lu·∫≠t box
‚öúTVien d√πng '/rule' ƒë·ªÉ xem lu·∫≠t box c·ªßa m√¨nh
Thank you for using‚ù§
Xin c·∫£m ∆°n ƒë√£ ƒë·ªçc...UwU
¬© Admin: NGUY·ªÑN DUY AN`, threadID);
	}
	else {
		try {
			const { createReadStream, existsSync, mkdirSync } = global.nodemodule["fs-extra"];
			let { threadName, participantIDs } = await api.getThreadInfo(threadID);

			const threadData = global.data.threadData.get(parseInt(threadID)) || {};
			const path = join(__dirname, "cache", "joinGif");
			const pathGif = join(path, `${threadID}.gif`);

			var mentions = [], nameArray = [], memLength = [], i = 0;
			
			for (id in event.logMessageData.addedParticipants) {
				const userName = event.logMessageData.addedParticipants[id].fullName;
				nameArray.push(userName);
				mentions.push({ tag: userName, id });
				memLength.push(participantIDs.length - i++);
			}
			memLength.sort((a, b) => a - b);
			
			(typeof threadData.customJoin == "undefined") ? msg = "Hello con v·ª£: {name}.\nCh√†o m·ª´ng ƒë√£ ƒë·∫øn v·ªõi: {threadName}.\n{type} l√† th√†nh vi√™n th·ª© {soThanhVien} c·ªßa nh√≥m ü•≥, Kh√¥ng t∆∞∆°ng t√°c l√† b·ªã kick ƒë√≥ nha" : msg = threadData.customJoin;
			msg = msg
			.replace(/\{name}/g, nameArray.join(', '))
			.replace(/\{type}/g, (memLength.length > 1) ?  'c√°c b·∫°n' : 'b·∫°n')
			.replace(/\{soThanhVien}/g, memLength.join(', '))
			.replace(/\{threadName}/g, threadName);

			if (existsSync(path)) mkdirSync(path, { recursive: true });

			if (existsSync(pathGif)) formPush = { body: msg, attachment: createReadStream(pathGif), mentions }
			else formPush = { body: msg, mentions }

			return api.sendMessage(formPush, threadID);
		} catch (e) { return console.log(e) };
	}
}